@page "/login"
@layout AuthLayout


@using CEM.Components.Layout
@using CEM.Models
@using Microsoft.AspNetCore.Authentication.Cookies
@using Radzen.Blazor
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor

@inject NavigationManager navigationManager
@inject CEMContext cemDbContext






<h3>Đăng Nhập</h3>

<div class="login-container">
    <EditForm Model="@LoginModel" OnValidSubmit="Authenticate" FormName="LoginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label> User Name</label>
            <InputText @bind-Value="LoginModel.UserName" class="form-control" placeholder="UserName" />
            <ValidationMessage For="() =>LoginModel.UserName"/>
        </div>

        <div class="form-group">
            <label for="password">Mật Khẩu</label>
            <InputText id="password" @bind-Value="LoginModel.Password" type="password" class="form-control" />
            <ValidationMessage For="() =>LoginModel.Password" />
        </div>
        <div> 
            <span> @erroMes</span>
        </div>
        <button type="submit" class="btn btn-primary">Đăng Nhập</button>

        <div class="forgot-password">
            <a href="#">Quên mật khẩu?</a>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    public HttpContent? HttpContent { get; set; }
    [SupplyParameterFromForm]

    public LoginView LoginModel { get; set; } = new();
    private string? erroMes;
    private async Task Authenticate()
    {
        var user = cemDbContext.Users.Where(x => x.UserName == LoginModel.UserName).FirstOrDefault();
        if(user is null || user.Password != LoginModel.Password)
        {
            erroMes = "Invalid UserName and Password";
            return;
        }
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name,LoginModel.UserName),
            new Claim(ClaimTypes.Role,user.Role)

        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

        var principal = new ClaimsPrincipal(identity);
        await HttpContextAccessor.HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");
    }
}



